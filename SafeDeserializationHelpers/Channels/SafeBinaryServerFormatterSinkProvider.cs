// <auto-generated/>
//
// System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.cs
//
// Author: Rodrigo Moya (rodrigo@ximian.com)
//         Lluis Sanchez Gual (lluis@ximian.com)
//
// 2002 (C) Copyright, Ximian, Inc.
//

//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#pragma warning disable 1591 // missing XML comments

using System.Collections;
using System.Runtime.Serialization.Formatters;
using System.Runtime.InteropServices;
using System.Runtime.Remoting.Channels;
using System;
using System.Security.Permissions;

namespace Zyan.SafeDeserializationHelpers.Channels
{
    public class SafeBinaryServerFormatterSinkProvider :
        IServerFormatterSinkProvider, IServerChannelSinkProvider
    {
        // default type filter level for BinaryServerFormatterSink is low
        public const TypeFilterLevel DefaultFilterLevel = TypeFilterLevel.Low;
        IServerChannelSinkProvider next = null;
        SafeBinaryCore _binaryCore;

        internal static string[] AllowedProperties = new string[] { "includeVersions", "strictBinding", "typeFilterLevel" };

        public SafeBinaryServerFormatterSinkProvider()
        {
            _binaryCore = new SafeBinaryCore(DefaultFilterLevel);
        }

        public SafeBinaryServerFormatterSinkProvider(IDictionary properties,
            ICollection providerData)
        {
            _binaryCore = new SafeBinaryCore(DefaultFilterLevel, this, properties, AllowedProperties);
        }

        public IServerChannelSinkProvider Next
        {
            [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]
            get
            {
                return next;
            }

            [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]
            set
            {
                next = value;
            }
        }

        [ComVisible(false)]
        public TypeFilterLevel TypeFilterLevel
        {
            get { return _binaryCore.TypeFilterLevel; }
            set
            {
                IDictionary props = (IDictionary)((ICloneable)_binaryCore.Properties).Clone();
                props["typeFilterLevel"] = value;
                _binaryCore = new SafeBinaryCore(DefaultFilterLevel, this, props, AllowedProperties);
            }
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]
        public IServerChannelSink CreateSink(IChannelReceiver channel)
        {
            IServerChannelSink next_sink = null;
            SafeBinaryServerFormatterSink result;

            if (next != null)
                next_sink = next.CreateSink(channel);

            result = new SafeBinaryServerFormatterSink(SafeBinaryServerFormatterSink.Protocol.Other,
                next_sink, channel);

            result.BinaryCore = _binaryCore;
            return result;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]
        public void GetChannelData(IChannelDataStore channelData)
        {
            // Nothing to add here
        }
    }
}
